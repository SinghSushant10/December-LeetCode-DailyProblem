#2779. Maximum Beauty of an Array After Applying Operation

class Solution {
    public int maximumBeauty(int[] nums, int k) {
        if(nums.length==1) return 1;
   
        int max=0;
        // Step 1: Find the maximum value in the input array
        for(int num: nums){
            max=Math.max(max,num);
        }
        // Step 2: Create an array to represent the range of possible values affected by `k`
        int count[] = new int[max+1];
        // Step 3: Adjust the count array to reflect the range of influence for each number in `nums` 
        for(int num:nums){
            count[Math.max(num-k,0)]++;
            count[Math.min(num+k+1,max)]--;
        }
        // Step 4: Calculate the prefix sum to determine the maximum number of overlapping ranges
        int curSum=0;
        int maxSum=0;
        for(int c:count){
            curSum+=c;
            maxSum=Math.max(maxSum,curSum);
        }
        return maxSum;

    }
}
