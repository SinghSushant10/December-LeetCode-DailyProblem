#2182. Construct String With Repeat Limit

class Solution {
    public String repeatLimitedString(String s, int repeatLimit) {
        // Frequency count of characters
        int[] freq = new int[26];
        for (char c : s.toCharArray()) {
            freq[c - 'a']++;
        }

        //  Max-Heap to maintain the largest available character
        PriorityQueue<int[]> maxHeap = new PriorityQueue<>((a, b) -> b[0] - a[0]);
        for (int i = 0; i < 26; i++) {
            if (freq[i] > 0) {
                maxHeap.offer(new int[]{i, freq[i]}); // {character, frequency}
            }
        }

        StringBuilder result = new StringBuilder();

        while (!maxHeap.isEmpty()) {
            int[] current = maxHeap.poll();
            int charIdx = current[0], count = current[1];
            char currentChar = (char) (charIdx + 'a');

            // Append the current character up to `repeatLimit` times
            int useCount = Math.min(count, repeatLimit);
            for (int i = 0; i < useCount; i++) {
                result.append(currentChar);
            }

            // Update the remaining count
            count -= useCount;

            // If there's still remaining of the current character, handle the next largest character
            if (count > 0) {
                if (!maxHeap.isEmpty()) {
                    int[] next = maxHeap.poll();
                    int nextCharIdx = next[0], nextCount = next[1];
                    char nextChar = (char) (nextCharIdx + 'a');

                    // Add one occurrence of the next largest character
                    result.append(nextChar);
                    nextCount--;

                    // Re-insert the next character if it has remaining frequency
                    if (nextCount > 0) {
                        maxHeap.offer(new int[]{nextCharIdx, nextCount});
                    }

                    // Re-insert the current character back to the heap
                    maxHeap.offer(new int[]{charIdx, count});
                }
            }
        }

        return result.toString();
    }
}
